Давай начнем сначала =)
Разработка прогрммных модулей и приложений - очень интересный и увлекательный предмет
Мы проходили, как создать свой http сервер
Разрабатывали свой сайт на Джанго 
Посылали запросы в базу данных и получали ответы в виде кодов 

А это кстати, наша тема в проектах
Мы посылали HTTP запросы и принимали HTTP ответы =)

На разные запросы получали разный код и пояснение

Пссст... Тебе тут подсказка!!! Тебе же нужно сдать Джанго? Лови! =)

Это команда для создания нашего с тобой контейнера.
Пссст.. только никому не рассказывай! Это наша с тобой ТАЙНА, хе-хе!

docker run -d --name kr_db -p 5433:5433 -e POSTGRES_USER=lina -e POSTGRES_PASSWORD=sirius -e POSTGRES_DB=kr_project postgres

Синтаксис команды "docker run" выглядит следующим образом:
docker run [опции] <имя_образа> [аргументы]

Ты же понимаешь, ччто создается с помощью этой команды?
Помнишь мы проходили docker, бд?
docker run используется для созднания и запуска экземпляр Docker-контейнера из образа 
Docker образ и Docker контейнер - это 2 разных понятия.

ОБраз (Image) - это статичный и неизменяемый файл, содержит все неоюходимы компоненты и зависимости для запуска контейнера. Он заботится о контейнерах! Образ создается на основе Dockerfile - текстового файла, который описывает шаги для создания образа. Образ можно рассматривать как шаблон или основу для создания 1 или нескольких контейнеров.
ОБразы не изменяются, создается только новый образ на основе существующего

А Контейнер! Это другое дело! Это уже запущенный экземпляр Docker образа - он и создается на его основе.
Контейнер - это изолированнная среда. В ней работает приложение, основанное на Docker образе
Контейнер полностью изолирован и обладает своим собственным файловым пространством, сетевыми настройками, PID-пространством.
Конт могут запускаться и останавливаться по требованию

Каждый Контейнер - это еще и изолированный процесс, который работает внутри Docker-демона
Вот их можно копировать и перемещать.

Контейнеры являются основным средством доставки и запуска приложений с помощью Docker, позволяя более эффективно использовать ресурсы и обеспечивая легковесную виртуализаци

Фух! Вот такая история о образах и контейнерах! Вот так вот =) 
А для запуска контейнера нам нужно: 
- docker run - запустить контейнер
- -d --detach - Запускает контейнер в фоновом режиме
- -p порт_хоста, порт_контейнера - проброс портов, позволяет связать порт контейнера  портом хоста
- -v - путь_зоста, путь_контейнера
- --name имя контейнера
- --env <переменная-значения> - устанавивает переменные среды в контейнере
- --rm - авт уд после ост
- --network  - сеть, в которой он будет работать
- <имя образа>
- [аргументы] 

И ничего не бойся! Ты на щите, помни об этом!
И ты все равно будешь заниматься любимым делом, поверь! Верь в это, дорогая!
И как здорово, что ты знаешь, ЧТО ТЫ ЛЮБИШЬ! 
Я горжусь тобой!
Ты молодец!

Помнишь, как начинала 2 семестр? Ты особенная, потому что ты единственная, кто смог принять все с новым интересом. Не потому что надо, А ПОТОМ ЧТО ХОЧУ, понимаешь?

Вот здорово было в начале года!

После изучения Джанго мы с тобой изучали паттерны - а ведь это очень полезная вещь при проектировании приложений
Если мы сталкиваемся с определенными трудностями - возможно эту проблему уже кто-то до нас решил - и тогда мы можем применить наиболее подходящий паттерн.

Помнишь, какие паттерны мы с тобой прошли? Интересно?! Мне тоже!
Давай по порядку!

Порождающие паттерны проектирования решают проблемы содания объектов нашего приложения  их взаимодействия
Другие паттерны в это время работают с уже соданными объектами (например, паттерн посетитель или адаптер, итератор или фасад, интерпретатор, декоратор, наблюдатель и шаблонный метод)
Давай вспомним остальные паттерны

Порождающие паттерны ты конечно же помнишь)
Это Абстрактная фабрика, Фабричный метод, Строитель, Прототип и Синглтон

Кстати! Синглтон нужно обязательно вспомнить!
Ведь он позволяет создавать единственный экземпляр класса =)
Вот такая у него работа

А прототип? Помнишь, прототип испоьзуется для копирования его свойств?

А абстрактная фабрика? У нее очень важная работа) Она создает группы связанных объектов

Конечно, они походи с фабричным методом =)
Но нет! Фабричный метод создает объекты на основе разных классов. Вот так вот 

Допустим, (о, как раз речь пойдет о фабрике!) у нас есть ИЗОБРАЖЕНИЯ
Мы будем создавать изображения разного типа
Создание экземпляров классов будет зависеть от их типа 

! Заметка:
Отличие Абстрактной фабрики от Фабричного метода:

Фабричный метод определяет обзий интерфейс для сощдания обхектов в суперкласск, позволяя подклассам изменять тип создваемых объектов















































